/*
 * Rekeningrijden Belgium API
 *
 * The international API for Rekeningrijden Belgium
 *
 * OpenAPI spec version: 0.4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using System.ComponentModel.DataAnnotations;
using System.Threading.Tasks;
using IO.Swagger.Attributes;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers;

/// <summary>
/// 
/// </summary>
[ApiController]
[Route("[controller]")]
public class RoutingApiController : ControllerBase
{ 
    private readonly IRoutingService _routingService;

    public RoutingApiController(IRoutingService service)
    {
        _routingService = service;
    }








    /// <summary>
    /// Return processed route
    /// </summary>
    /// <remarks>Return the processed route data based on an earlier submission</remarks>
    /// <param name="body"></param>
    /// <param name="cc">ISO 3166-1 Alpha-2 compliant country code</param>
    /// <response code="200">accepted</response>
    /// <response code="400">invalid input</response>
    [HttpPost]
    [Route("/return-processed")]
    [ValidateModelState]
    [SwaggerOperation("StoreProcessed")]
    public async Task<IActionResult> StoreProcessed([FromBody]Route body, [FromQuery][Required()][RegularExpression("/[A-Z]{2}/")]string cc)
    { 
        //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        return Ok();

        //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(400);
    }

    /// <summary>
    /// Submit route
    /// </summary>
    /// <remarks>Submit raw route data to be processed by another country and returned at a later time</remarks>
    /// <param name="body"></param>
    /// <param name="cc">ISO 3166-1 Alpha-2 compliant country code</param>
    /// <response code="200">accepted</response>
    /// <response code="400">invalid input</response>
    [HttpPost]
    [Route("/submit-raw")]
    [ValidateModelState]
    [SwaggerOperation("SubmitRaw")]
    public async Task<IActionResult> SubmitRaw([FromBody]RawRoute body, [FromQuery][Required()][RegularExpression("[aA-zZ]{2}")]string cc)
    {
        try
        {
            if (_routingService.Routing(cc, body)) return Ok(); return BadRequest();
        }
        catch (Exception ex)
        {
            return BadRequest(ex.Message);
        }
    }
}